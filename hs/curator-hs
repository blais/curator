#!/usr/bin/env python
"""
A much improved and simplified version of curator, using HighSlide.

This version:

- Uses a newer design based on Torstein Hoensi's amazing highslide.js

- Does its work in parallel in order to process large amounts of files

- Uses the PIL instead of ImageMagick to generate the thumbnails

- Use a simple template where only the word 'THUMBNAIL_INDEX' gets replaced;
  easy to customize: copy of the amazing highslide templates and
  replace the example images by this tag.


FIXME: TODO- Incorporates a heuristic based on time for grouping photos automatically
FIXME: implement gaps heuristic and grouping
FIXME: this is code in-progress. Not done yet. Don't use it.
FIXME: TODO add captions generated from the EXIF comment
FIXME: TODO allow to customize output size and relative directory name
FIXME: also create a stupid makefile to update the thumbnails using make
FIXME: Create index.html symlink
FIXME: Add a simple 'Clean' target.
FIXME: do resizing from multiple threads
FIXME: add an option to resize the originals and include that under the gallery directory itself
FIXME: insert gaps for directories
"""
__author__ = 'Martin Blais <blais@furius.ca>'
__license__ = 'GNU GPL v2'

import re, os, logging, threading
import Queue
from StringIO import StringIO
from os.path import *
from shutil import copytree
from PIL import Image # You need to install PIL (Python Imaging Library)

# Important note: in all the code below, variables for absolute paths begin
# with an underscore, e.g. output (relative) vs, _output (absolute).


# Location of resources (templates and support files to copy).
# Should be in the same place as the script itself.
_resources = dirname(realpath(__file__))


def find_files(root_, regexp, ignores=[]):
    """ Find and generate all filenames."""
    if isinstance(regexp, str):
        regexp = re.compile(regexp)

    ignores = [(re.compile(i) if isinstance(i, str) else i)
               for i in ignores]

    root_ = abspath(root_)
    rem = len(root_)+1
    for root, dirs, files in os.walk(root_):
        dirs[:] = [d for d in dirs
                   if not any(ire.search(d) for ire in ignores)]
        afiles = [join(root, x) for x in files]

        afiles = [basename(f) for f in afiles
                  if not any(ire.search(f) for ire in ignores)]
        for fn in afiles:
            if not regexp.match(fn):
                continue
            yield root_, join(root, fn)[rem:]


def insuredir(dn):
    "Insure the given directory exists."
    if not exists(dn):
        try:
            os.makedirs(dn)
        except OSError:
            pass # Possibly called from multiple threads.

def resize_image(_infn, _outfn, size, force):
    if force or not exists(_outfn) or getmtime(_outfn) < getmtime(_infn):

        logging.info("Generating thumbnail for '%s'" % _infn)
        insuredir(dirname(_outfn))
        im = Image.open(_infn)
        im.thumbnail((size, size), Image.ANTIALIAS)
        im.save(_outfn, "JPEG")
    else:
        logging.info("Reusing thumbnail for '%s'" % _infn)

# Template for each image in the output.
_image_template = '''\
<a href="URL" class="highslide" onclick="return hs.expand(this)">
<img src="THUMB"/></a>
'''

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-o', '--output', action='store', default='gallery',
                      help="Name of output directory (relative to root)")

    parser.add_option('-s', '--thumb-size', action='store', type='int', default=128,
                      help="Desired size of thumbnails")

    parser.add_option('-f', '--force', action='store_true',
                      help="Regenerate everything; don't even try to reuse converted images.")

    parser.add_option('-j', '--jobs', action='store', type='int', default=1,
                      help="Specific the nb. of parallel image conversion jobs to run.")

    opts, args = parser.parse_args()
    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)-8s: %(message)s')

    # Validate arguments and insure we have a single directory.
    if len(args) == 0:
        args = ['.']
    elif len(args) > 1:
        parser.error("Usage: [DIR]")
    _root = abspath(args[0])
    if not exists(_root):
        parser.error("Input directory '%s' does not exist." % _root)

    # Compute output directory location.
    _output = abspath(join(_root, opts.output))
    logging.info("Output will be stored in '%s'" % _output)

    # Find the entire list of relative filenames.
    allfiles = []
    for _, fn in find_files(_root, '.*\.(je?pg|png|gif)',
                            ignores=[opts.output, 'thumbs', 'highslide']):
        logging.info("Found '%s'" % join(_root, fn))
        allfiles.append(fn)

    # Make up a list of conversion jobs to run..
    insuredir(_output)
    insuredir(join(_output, 'thumbs'))
    conversions = []
    for fn in allfiles:
        thumbfn = join('thumbs', dirname(fn), 'thumb.%s' % basename(fn))
        conversions.append( (_root, fn, thumbfn) )

    # Generate all the necessary thumbnails (possibly in parallel).
    if opts.jobs == 1:
        for _root, fn, thumbfn in conversions:
            resize_image(join(_root, fn), join(_output, thumbfn),
                         opts.thumb_size, opts.force)
    else:
        jobqueue = Queue.Queue()
        for _root, fn, thumbfn in conversions:
            job = (resize_image,
                   join(_root, fn), join(_output, thumbfn),
                   opts.thumb_size, opts.force)
            jobqueue.put(job)
        def worker():
            try:
                while 1:
                    job = jobqueue.get_nowait()
                    fun = job[0]; fun(*job[1:])
            except Queue.Empty:
                pass
        threads = [threading.Thread(target=worker) for _ in xrange(opts.jobs)]
        [t.start() for t in threads]
        [t.join() for t in threads]

    # Copy the useful part of highslide we need.
    _highdir = join(_output, 'highslide')
    if not exists(_highdir):
        copytree(join(_resources, 'highslide'), _highdir)

    # Generate an HTML index from the template.
    entries = []
    for _root, fn, thumbfn in conversions:
        url = join('..', fn)
        entries.append(_image_template.replace('URL', url).replace('THUMB', thumbfn))

    template = open(join(_resources, 'index.html')).read()
    template = template.replace('THUMBNAIL_INDEX', os.linesep.join(entries))
    open(join(_output, 'index.html'), 'w').write(template)

if __name__ == '__main__':
    main()
