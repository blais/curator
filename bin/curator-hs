#!/usr/bin/env python
"""
An improved and simplified version of curator.

This version:

- Uses a newer design based on highslide.js
- Does its work in parallel in order to process large amounts of files
- Incorporates a heuristic based on time for grouping photos automatically
- Uses the PIL instead of ImageMagick to generate the thumbnails

## FIXME: this is code in-progress. Not done yet. Don't use it.
## FIXME: TODO -- add captions generated from the EXIF
## FIXME: TODO allow to customize output size and relative directory name
## FIXME: also create a stupid makefile to update the thumbnails using make
## FIXME: Create index.html symlink
## FIXME: Add a simple 'Clean' target.
## FIXME: do resizing from multiple threads
## FIXME: add an option to resize the originals and include that under the gallery directory itself
"""
import re, os, logging, threading
from StringIO import StringIO
from os.path import *
from shutil import copytree
from PIL import Image


# Location of resources (templates and support files to copy).
resources = join(dirname(dirname(__file__)), 'share', 'hs')


def find_files(root_, regexp, ignores=[]):
    """ Generate all the filenames."""
    if isinstance(regexp, str):
        regexp = re.compile(regexp)

    ignores = [(re.compile(i) if isinstance(i, str) else i)
               for i in ignores]

    root_ = abspath(root_)
    rem = len(root_)+1
    for root, dirs, files in os.walk(root_):
        dirs[:] = [d for d in dirs
                   if not any(ire.search(d) for ire in ignores)]
        afiles = [join(root, x) for x in files]

        afiles = [basename(f) for f in afiles
                  if not any(ire.search(f) for ire in ignores)]
        for fn in afiles:
            if not regexp.match(fn):
                continue
            yield root_, join(root, fn)[rem:]


def insuredir(dn):
    "Insure the given directory exists."
    if not exists(dn):
        os.makedirs(dn)


# Template for each image in the output.
_image_template = '''\
<a href="URL" class="highslide" onclick="return hs.expand(this)">
<img src="THUMB"/></a>
'''

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-j', '--jobs', action='store', type='int',
                      help="Specific the nb. of parallel image conversion jobs to run.")

    parser.add_option('-o', '--output', action='store', default='gallery',
                      help="Name of output directory (relative to root)")

    # Relative directory name for output files.
    reloutput = 'gallery'

    size = (128, 128)

    opts, args = parser.parse_args()
    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)-8s: %(message)s')

    # Validate arguments and insure we have a single directory.
    if len(args) == 0:
        args = ['.']
    elif len(args) > 1:
        parser.error("Usage: [DIR]")
    root = args[0]
    if not exists(root):
        parser.error("Input directory '%s' does not exist." % root)

    # Compute output directory location.
    output = join(root, reloutput)
    logging.info("Output will be stored in '%s'" % output)

    # Find the entire list of relative filenames.
    allfiles = []
    for _, fn in find_files(root, '.*\.(je?pg|png|gif)', ignores=[reloutput]):
        logging.info("Found '%s'" % join(root, fn))
        allfiles.append(fn)

    # Make up a list of conversion jobs to run..
    insuredir(output)
    insuredir(join(output, 'thumbs'))
    conversions = []
    for fn in allfiles:
        logging.info("Generating thumbnail for '%s'" % fn)
        infn = join(root, fn)
        relthumbfn = join('thumbs', dirname(fn), 'thumb.%s' % basename(fn))
        thumbfn = join(output, relthumbfn)
        conversions.append( (fn, infn, relthumbfn) )

    # Generate all the necessary thumbnails (possibly in parallel).


        if not exists(thumbfn):
            insuredir(dirname(thumbfn))
            im = Image.open(infn)
            im.thumbnail(size, Image.ANTIALIAS)
            im.save(thumbfn, "JPEG")

    # Copy the useful part of highslide we need.
    highdir = join(output, 'highslide')
    if not exists(highdir):
        copytree(join(resources, 'highslide', 'highslide'), highdir)

    # Generate an HTML index from the template.
    entries = []
    for fn, infn, thumbfn in conversions:
        url = join('..', fn)
        entries.append(_image_template.replace('URL', url).replace('THUMB', thumbfn))

    template = open(join(resources, 'index.html')).read()
    template = template.replace('IMAGES', os.linesep.join(entries))
    open(join(output, 'index.html'), 'w').write(template)

if __name__ == '__main__':
    main()
