#
# $Source$
# $Id$
#

"""Discovery objects.

This module contains the discovery interface that gets implemented by various
concrete discovery objects themselves.

This is where the location of files is chosen.

"""

__version__ = "$Revision$"
__author__ = "Martin Blais <blais@furius.ca>"


import sys, os
from os.path import *

from curator import data
from curator.data import Image, Dir
import curator.data

from pprint import pprint


# valid image extensions
imgexts = [ 'jpeg', 'jpg', 'gif', 'png', 'rgb', 'pbm', 'pgm', 'ppm', \
            'tiff', 'tif', 'rast', 'xbm', 'bmp' ]


class Discovery:

    """Base class for discovery classes."""

    def __init__(self):
        pass

    def execute(self, opts):
        """Base method for discovery.

        @input: options
        @output: list of images.
        """

        pass



class SepRootDiscovery(Discovery):

    """A simple strategy for organizing all generated files under a single
    subdirectory located at the root, with subdirectories for types of files
    within it. """

    # name of the root subdirectory that contains all files generated by curator.
    root_subdir = 'gallery'

    # subdirectories for various types of files generated by curator.
    thumb_subdir = 'thumb'
    thumb_fmt = '%s.thumb.jpg'

    browse_subdir = 'browse-%s'
    browse_fmt = '%s.browse.jpg'

    def execute(self, opts):

        #
        # Phase 1: go get the files
        #

        def get_files(curdir_path):

            # don't descend in curator's directory.
            if curdir_path == self.root_subdir:
                return None

            curdir = Dir(curdir_path)

            files = os.listdir(join(opts.root, curdir.dirn))

            for fn in files:
                rfn = join(curdir.dirn, fn)
                afn = join(opts.root, rfn)
                if isdir(afn):
                    newdir = get_files(rfn)
                    if newdir != None:
                        curdir.subdirs.append(newdir)
                elif isfile(afn):
                    bn, ext = splitext(rfn)
                    if ext and ext[1:] in imgexts:
                        img = Image(rfn)
                        curdir.images.append(img)

            if not curdir.images and not curdir.subdirs:
                curdir = None
            
            if curdir and curdir.images:
                curdir.images.sort(
                    lambda x, y: cmp(getmtime(join(opts.root, x.fullfn)),
                                     getmtime(join(opts.root, y.fullfn))))

            if curdir and curdir.subdirs:
                curdir.subdirs.sort(
                    lambda x, y: cmp(getmtime(join(opts.root, x.dirn)),
                                     getmtime(join(opts.root, y.dirn))))

            return curdir

        images = get_files('')

        # Dump tree on output.
        print
        images.dump(sys.stdout)
        print

##         #
##         # Phase 2: set up some common basic location scheme for the generated
##         # files.
##         #

##         class Visitor(curator.data.Visitor):

##             def visit_image(self, image):
##                 # set thumbnail location
##                 image.representations['thumb'] = join(
##                     SepRootDiscovery.root_subdir,
##                     SepRootDiscovery.thumb_subdir,
##                     SepRootDiscovery.thumb_fmt % image.bn)

##         visitor = Visitor()
##         images.visit(visitor)

        return images

    def get_location(self, type, image, extra):

        """Returns a location suitable for storing the given image
        version."""

        rv = None
        if type == 'thumb':
            rv = join(self.root_subdir, self.thumb_subdir,
                      image.dir, self.thumb_fmt % image.bn)
            image.representations[type] = rv
            
        elif type == 'browse':
            rv = join(self.root_subdir, self.browse_subdir % extra,
                      image.dir, self.browse_fmt % image.bn)
            image.representations[type] = rv

##         elif type == 'html_image':
##             rv = join(self.root_subdir, self.html_subdir % extra,
##                       image.dir, self.html_fmt % image.bn)
##             image.representations[type] = rv

##         elif type == 'html_dir':
##             rv = join(self.root_subdir, self.html_subdir % extra, image.dir)
##             image.representations[type] = rv

        return rv



